import os
import random
import string
import time
import threading
import html as htmlliibbbbb
import queue
import csv
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import undetected_chromedriver as uc
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
import names, re, requests
import subprocess
import psutil
from selenium.common.exceptions import *
import tempfile
LISTENS = 0
FOLLOWS = 0
FAVORITES = 0
CREATED_ACCOUNTS = 0

SPOTIFY_SIGNUP_URL = "https://www.spotify.com/br-pt/signup"
REDIRECT_URL_PART = "open.spotify.com/intl-pt/"
_file_lock = threading.Lock()
EXCEL_PATH = "contas.csv"
API_KEY_CAPSOLVER = 'CAPSOLVER_API_KEY'
USER_SPOTIFY = "ARTISTA_NOME"
NUM_THREADS = 5


DRIVER_LIST = []
TEMP_FILES = []

#def vpn_rotate():
#    while True:
#        time.sleep(1200)
#        print("Rotating IP -> again after 20 minutes...")
#        command = ""
#        if random.random() < 0.5:
#            command = "mullvad.exe relay set location br sao"
#        else:
#            command = "mullvad.exe relay set location us"
#
#        subprocess.run(command, shell=True)
#        subprocess.run("mullvad.exe reconnect", shell=True)


def driver_reset():
    global DRIVER_LIST
    try:
        while True:
            time.sleep(1200)
            for x in DRIVER_LIST:
                try:
                    x.close()
                    x.quit()
                except:
                    pass
                DRIVER_LIST.remove(x)
        print("Drivers reseted...")
    except:
        pass

def kill_stale_browser(driver):
    global DRIVER_LIST
    try:
        time.sleep(300)
        if driver in DRIVER_LIST:
            try:
                driver.close()
                driver.quit()
            except:
                pass
            DRIVER_LIST.remove(driver)
    except:
        pass


def iniciar_navegador(proxy=None):
    global DRIVER_LIST
    temp_dir = tempfile.gettempdir()
    rand_id = random.randint(5, 999999)
    temp_filename = os.path.join(temp_dir, f"chrome_profile_{rand_id}")
    options = uc.ChromeOptions()
    if proxy:
        options.add_argument(f"--proxy-server={proxy}")

    user_agents = [
    # Windows Chrome
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36",
    "Mozilla/5.0 (Windows NT 11.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36",
    # Windows Edge
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36 Edg/140.0.0.0",
    "Mozilla/5.0 (Windows NT 11.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36 Edg/141.0.0.0",
    # Mac Safari
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 13_5) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.6 Safari/605.1.15",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 13_6) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Safari/605.1.15",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 12_6) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.5 Safari/605.1.15",
    # Mac Chrome
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 13_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 13_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
    ]
    user_agent = random.choice(user_agents)


    options.add_argument(f"--user-agent={user_agent}")
    options.add_argument("--incognito")
    options.add_argument("--disable-translate")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--disable-sync")
    options.add_argument("--disable-gpu")
    options.add_argument("--disable-background-networking")
    options.add_argument("--disable-extensions")
    options.add_argument("--disable-software-rasterizer")
    options.add_argument("--disable-default-apps")
    options.add_argument("--disable-blink-features=AutomationControlled")
    options.add_argument("--disable-save-password-bubble")
    options.add_argument("--disable-autofill-keyboard-accessory-view[8]")
    options.add_argument("--password-store=basic")
    options.add_argument("--window-size=350,350")
    options.add_argument(f"--user-data-dir={temp_filename}")  
    options.add_experimental_option("prefs", {
        "profile.content_settings.exceptions.media_stream_protected_content": {
            "http://*,https://*": {
                "setting": 1
            }
        },
        "credentials_enable_service": False,
        "profile.password_manager_enabled": False
    })

    driver = uc.Chrome(options=options, user_data_dir=temp_filename ,use_subprocess=False)
    print("[!] iniciado com user-agent:", user_agent)
    DRIVER_LIST.append(driver)
    driver.execute_script("document.body.style.zoom='30%'")
    return driver, temp_filename


def resolve_captcha(driver):
    global API_KEY_CAPSOLVER
    try:
        html = driver.page_source
        sitekeys = re.findall(r'data-sitekey="([^"]+)"', html)
        while sitekeys == []:
            html = driver.page_source
            sitekeys = re.findall(r'data-sitekey="([^"]+)"', html)
        iframe_match = re.search(
            r'(<iframe[^>]*title=["\']reCAPTCHA["\'][^>]*>.*?</iframe>)',
            html,
            re.IGNORECASE | re.DOTALL
        )

        # espera até encontrar
        while iframe_match is None:
            html = driver.page_source
            iframe_match = re.search(
                r'(<iframe[^>]*title=["\']reCAPTCHA["\'][^>]*>.*?</iframe>)',
                html,
                re.IGNORECASE | re.DOTALL
            )

        # extrai o bloco do iframe
        iframe_block = iframe_match.group(1)

        # pega a URL do src
        import urllib.parse
        src_match = re.search(r'src=["\']([^"\']+)["\']', iframe_block)
        url = ""
        if src_match:
            raw_url = src_match.group(1)
            raw_url = htmlliibbbbb.unescape(raw_url)
            url = raw_url
        import capsolver
        sitekeys = sitekeys[0]
        cookiess = driver.get_cookies()
        cookie_str = "; ".join([f"{c['name']}={c['value']}" for c in cookiess])
        capmonster_uri = 'https://api.capsolver.com/createTask'
        header = {"Content-Type": "application/json"}
        CHALLENGE_PAGE = driver.current_url
        from urllib.parse import quote
        capsolver.api_key = API_KEY_CAPSOLVER
        solution = capsolver.solve({
            "type": "ReCaptchaV2EnterpriseTaskProxyLess",
            "websiteURL": driver.current_url,
            "websiteKey":sitekeys,
            "pageAction":"challenge",
            'isInvisible':False
        })

        result = driver.execute_script("""
            function findRecaptchaClients() {
    // eslint-disable-next-line camelcase
    if (typeof (___grecaptcha_cfg) !== 'undefined') {
        // eslint-disable-next-line camelcase, no-undef
        return Object.entries(___grecaptcha_cfg.clients).map(([cid, client]) => {
        const data = { id: cid, version: cid >= 10000 ? 'V3' : 'V2' };
        const objects = Object.entries(client).filter(([_, value]) => value && typeof value === 'object');

        objects.forEach(([toplevelKey, toplevel]) => {
            const found = Object.entries(toplevel).find(([_, value]) => (
            value && typeof value === 'object' && 'sitekey' in value && 'size' in value
            ));
        
            if (typeof toplevel === 'object' && toplevel instanceof HTMLElement && toplevel['tagName'] === 'DIV'){
                data.pageurl = toplevel.baseURI;
            }
            
            if (found) {
            const [sublevelKey, sublevel] = found;

            data.sitekey = sublevel.sitekey;
            const callbackKey = data.version === 'V2' ? 'callback' : 'promise-callback';
            const callback = sublevel[callbackKey];
            if (!callback) {
                data.callback = null;
                data.function = null;
            } else {
                data.function = callback;
                const keys = [cid, toplevelKey, sublevelKey, callbackKey].map((key) => `['${key}']`).join('');
                data.callback = `___grecaptcha_cfg.clients${keys}`;
            }
            }
        });
        return data;
        });
    }
    return [];
    }
    return findRecaptchaClients();
    """)
        resultado = driver.execute_script(f"onChange(\"{solution['gRecaptchaResponse']}\")") 

        solve_button = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.NAME, "solve"))
        )

            # clica no botão
        solve_button.click()
        return CHALLENGE_PAGE
    except InvalidSessionIdException:
        return 3
    except:
        time.sleep(5)
        return 2


def gerar_senha_valida():
    letras = random.choice(string.ascii_letters)
    especial = random.choice("0123456789#?!&")
    restante = ''.join(random.choices(string.ascii_letters + "0123456789#?!&", k=9))
    senha = list(letras + especial + restante)
    random.shuffle(senha)
    return ''.join(senha)

def gerar_nome_real():
    nome = names.get_first_name()
    sobrenome = names.get_last_name()
    return nome, sobrenome

def gerar_data_nascimento():
    dia = str(random.randint(1, 28)).zfill(2)
    mes = random.choice([
        "Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho",
        "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"
    ])
    ano = str(random.randint(1980, 2005))
    return dia, mes, ano

def gerar_email_valido(nome, sobrenome):
    domain_mail = ["@gmail.com", "@bol.com.br", "@hotmail.com", "@outlook.com"]

    # possíveis formatos de nome
    formatos = [
        f"{nome.lower()}.{sobrenome.lower()}",
        f"{nome.lower()}{sobrenome.lower()}",
        f"{nome.lower()}_{sobrenome.lower()}",
        f"{nome.lower()}{sobrenome[0].lower()}",
        f"{nome[0].lower()}{sobrenome.lower()}",
        f"{sobrenome.lower()}.{nome.lower()}",
        f"{nome.lower()}",
        f"{nome.lower()}.",
        f"{nome.lower()}_", 
        f"{sobrenome.lower()}_", 
        f"{sobrenome.lower()}.",
        f"{sobrenome.lower()}", 
    ]

    base = random.choice(formatos)

    # sempre adiciona números (2–6 dígitos)
    quantidade = random.choice([2, 3, 4, 5, 6, 7, 8, 9, 10])
    numeros = ''.join(random.choices(string.digits, k=quantidade))

    # chance de o sobrenome vir depois dos números
    if random.random() < 0.5:
        base = f"{nome.lower()}{numeros}{sobrenome.lower()}"
    else:
        base = base + numeros

    random_domain = random.choice(domain_mail)

    return base + random_domain

def digitar_como_humano(elemento, texto):
    for letra in texto:
        elemento.send_keys(letra)

def clicar_elemento_seguro(navegador, by, valor, tentativas=3):
    for tentativa in range(tentativas):
        try:
            elemento = WebDriverWait(navegador, 10).until(
                EC.element_to_be_clickable((by, valor))
            )
            navegador.execute_script("arguments[0].scrollIntoView();", elemento)
            ActionChains(navegador).move_to_element(elemento).click().perform()
            return True
        except Exception:
            time.sleep(1)
    raise Exception("Elemento não clicável.")
first_call = True
def salvar_conta(rows, path=EXCEL_PATH):
    global first_call
    """Cria ou carrega o XLSX e anexa uma linha com os dados da conta."""
    if first_call and not os.path.exists(EXCEL_PATH):
        with open(EXCEL_PATH, mode='w', newline='',encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow(['email', 'password', 'name','birthday'])
            first_call = False
    with open(EXCEL_PATH, mode='a', newline='',encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(rows)

def realizar_cadastro(driver):
    global LISTENS, FOLLOWS, FAVORITES, CREATED_ACCOUNTS, DRIVER_LIST
    try:
        nome, sobrenome = gerar_nome_real()
        email = gerar_email_valido(nome, sobrenome)
        senha = gerar_senha_valida()
        dia, mes, ano = gerar_data_nascimento()
        nome_completo = f"{nome} {sobrenome}"
        driver.get(SPOTIFY_SIGNUP_URL)
        time.sleep(3)
        driver.execute_script("document.body.style.zoom='30%'")
        driver.execute_script("""
            const observer = new MutationObserver((mutationsList, observer) => {
                const button = document.querySelector(".onetrust-close-btn-handler");
                if (button) {
                    button.click(); 
                    observer.disconnect();
                }
            });

            observer.observe(document.body, { childList: true, subtree: true });
        """)

        time.sleep(1)

        driver.execute_script("""
            const span = [...document.querySelectorAll('span')].find(
                el => el.textContent.trim() === 'Inscrever-se'
            );
            if (span) {
                span.closest('a').click();
            }
        """)


        WebDriverWait(driver, 20).until(EC.presence_of_element_located((By.ID, "username")))
        digitar_como_humano(driver.find_element(By.ID, "username"), email)
        time.sleep(3)
        button = driver.find_element(By.XPATH, "//button[normalize-space()='Avançar']")
        button.click()

        WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "new-password")))
        digitar_como_humano(driver.find_element(By.ID, "new-password"), senha)
        time.sleep(2)
        driver.execute_script("""
            const btn = document.querySelector('button.e-91031-button-primary');
            if (btn) btn.click();
        """)

        WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "displayName")))
        digitar_como_humano(driver.find_element(By.ID, "displayName"), nome_completo)

        driver.find_element(By.ID, "day").send_keys(dia)
        driver.find_element(By.ID, "month").send_keys(mes)
        driver.find_element(By.ID, "year").send_keys(ano)

        opcoes = [
            "//span[contains(text(), 'Homem')]",
            "//span[contains(text(), 'Mulher')]",
            "//span[contains(text(), 'Outro')]",
            "//span[contains(text(), 'Prefiro não dizer')]"
        ]
        escolha = random.choice(opcoes)
        clicar_elemento_seguro(driver, By.XPATH, escolha)

        ActionChains(driver).send_keys(Keys.ENTER).perform()
        driver.execute_script("""
            const btn = document.querySelector('button.e-91031-button-primary');
            if (btn) btn.click();
        """)
        time.sleep(1.5)

        try:
            driver.execute_script("document.getElementById('terms-conditions-checkbox').click();")
        except: 
            pass

        driver.execute_script("""
            document.querySelector("button[data-testid='submit']").click();
        """)
        CHALLENGE_PAGE = ""

        time.sleep(1)
        text = "Algo deu errado. Tente de novo mais tarde."

        el = driver.execute_script(
                """
                var els = document.querySelectorAll("span, div, p, h1, h2, h3");
                for (var i=0; i<els.length; i++) {
                    if (els[i].innerText.trim() === arguments[0]) {
                        return els[i];
                    }
                }
                return null;
                """,
                text
            )
        t = threading.Thread(target=kill_stale_browser, args=(driver,))
        t.start()

        if not el:
            retries = 0
            success1 = 0
            CHALLENGE_PAGE = resolve_captcha(driver)
            if CHALLENGE_PAGE == 2:
                if driver in DRIVER_LIST:
                    DRIVER_LIST.remove(driver)
                try:
                    driver.close()
                    driver.quit()
                except:
                    pass
                time.sleep(5)
                return 2
            if CHALLENGE_PAGE == 3:
                if driver in DRIVER_LIST:
                    DRIVER_LIST.remove(driver)
                return 3
            time.sleep(1)
            while success1 == 0:
                time.sleep(2)
                try:
                    if driver.current_url == CHALLENGE_PAGE:
                        retries += 1
                        driver.refresh()
                        time.sleep(2)
                        CHALLENGE_PAGE = resolve_captcha(driver)
                        if CHALLENGE_PAGE == 2:
                            if driver in DRIVER_LIST:
                                DRIVER_LIST.remove(driver)
                            try:
                                driver.close()
                                driver.quit()
                            except:
                                pass
                            time.sleep(5)
                            return 2
                        if CHALLENGE_PAGE == 3:
                            if driver in DRIVER_LIST:
                                DRIVER_LIST.remove(driver)
                            return 3
                        time.sleep(2)
                    else:
                        time.sleep(2)
                        salvar_conta([email, senha, nome_completo, f"{dia}/{mes}/{ano}"])
                        WebDriverWait(driver, 30).until(
                            EC.presence_of_element_located((By.CSS_SELECTOR, "a[data-ga-action='play']"))
                        )
                        driver.execute_script("""
                            let link = document.querySelector("a[data-ga-action='play']");
                            if (link) {
                                link.click();
                            }
                        """)

                        search_input = WebDriverWait(driver, 30).until(
                            EC.presence_of_element_located((By.CSS_SELECTOR, 'input[data-testid="search-input"]'))
                        )
                        time.sleep(1.5)

                        search_input = WebDriverWait(driver, 30).until(
                            EC.presence_of_element_located((By.CSS_SELECTOR, 'input[data-testid="search-input"]'))
                        )
                        driver.execute_script("document.body.style.zoom='30%'")

                        search_input = WebDriverWait(driver, 30).until(
                            EC.presence_of_element_located((By.CSS_SELECTOR, 'input[data-testid="search-input"]'))
                        )
                        time.sleep(1.5)

                        search_input = WebDriverWait(driver, 30).until(
                            EC.presence_of_element_located((By.CSS_SELECTOR, 'input[data-testid="search-input"]'))
                        )
                        driver.execute_script("document.body.style.zoom='30%'")
                        search_input.send_keys(USER_SPOTIFY)
                        time.sleep(3.5)

                        driver.execute_script("""
                            const herocard = document.evaluate(
                                "//*[@data-testid='herocard-click-handler']",
                                document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null
                            ).singleNodeValue;
                            if (herocard) {
                                herocard.click();
                            }
                        """)

                        time.sleep(3.5)

                        driver.execute_script("""
                            const container = document.querySelector('[data-testid="action-bar-row"]');
                            const button = container.querySelector('.e-91000-button-primary');
                            if (button) {
                                button.click();
                            }
                        """)

                        wait_time = random.randint(64, 120)
                        time.sleep(wait_time)
                        if random.random() < 0.45:
                            driver.execute_script("""
                                document.querySelector("button[aria-label='Adicionar a Músicas Curtidas']").click();
                            """)
                            FAVORITES += 1
                        time.sleep(2)

                        if random.random() < 0.7:
                            driver.execute_script("""
                                // Seleciona botão pelo texto 'Seguir'
                                let buttons = Array.from(document.querySelectorAll("button"));
                                let seguir = buttons.find(b => b.textContent.trim() === "Seguir");
                                if (seguir) {
                                    seguir.click();
                                }
                            """)
                            FOLLOWS += 1
                        LISTENS += 1
                        success1 = 1
                            
                        if retries == 2 and success1 != 1:
                            driver.close()
                            if driver in DRIVER_LIST:
                                DRIVER_LIST.remove(driver)
                            try:
                                driver.close()
                                driver.quit()
                            except:
                                pass
                            time.sleep(5)
                            return 2
                except Exception as err:
                    print(err)
                    print("Captcha Success - With Error")
                    success1 = 1
                    return [email, senha, nome_completo, f"{dia}/{mes}/{ano}", "error_thread"]

            CREATED_ACCOUNTS += 1
            return [email, senha, nome_completo, f"{dia}/{mes}/{ano}"]
        else:
            if driver in DRIVER_LIST:
                DRIVER_LIST.remove(driver)
            try:
                driver.close()
                driver.quit()
            except:
                pass
            time.sleep(5)
            return 2
    
    except InvalidSessionIdException:
        if driver in DRIVER_LIST:
            DRIVER_LIST.remove(driver)
        time.sleep(5)
        return 2

    except Exception as e:
        print(e)
        driver.close()
        if driver in DRIVER_LIST:
            DRIVER_LIST.remove(driver)
        try:
            driver.quit()
        except:
            pass
        time.sleep(5)
        return 2

import math
import shutil
import os
def worker(idx, NUM_THREADS, cols=5, width=350, height=350, border=50):
    global FAVORITES, LISTENS, FOLLOWS, CREATED_ACCOUNTS, DRIVER_LIST
    driver = None
    temp_filename = None
    
    while True:
        try:
            try:
                print(f"Starting worker {idx}..")
                driver, temp_filename = iniciar_navegador(proxy=None)
                driver.set_window_size(width, height)

                # Calculate position (row/column) in grid
                row = idx // cols
                col = idx % cols

                # Apply border only on the x-axis (horizontal)
                x = col * (width + border)  # Horizontal position with gap
                y = row * height  # Vertical position without any gap

                # Set the window position with a horizontal gap (border)
                driver.set_window_position(x, y)

                while True:
                    try:
                        start = time.time()
                        resultado = realizar_cadastro(driver)

                        if isinstance(resultado, list):
                            if "error_thread" in resultado:
                                print(f"[{idx}] Conta criada: {resultado} / IN: {elapsed:.2f} segundos.")
                                if driver in DRIVER_LIST:
                                    DRIVER_LIST.remove(driver)
                                try:
                                    driver.close()
                                    driver.quit()
                                except:
                                    pass
                                time.sleep(5)
                                shutil.rmtree(temp_filename)

                                driver, temp_filename = iniciar_navegador(proxy=None)
                                driver.set_window_size(width, height)
                                driver.set_window_position(x, y)
                            else:
                                end = time.time()
                                driver.delete_all_cookies()
                                driver.execute_script("window.localStorage.clear();")
                                driver.execute_script("window.sessionStorage.clear();")
                                driver.refresh()
                                elapsed = end - start
                                print(f"[{idx}] Conta criada: {resultado} / IN: {elapsed:.2f} segundos.")
                                print(f"[{idx}] Statistics: LISTENS: {LISTENS}, FOLLOWS: {FOLLOWS}, FAVORITES: {FAVORITES}, CREATED_ACCOUNTS: {CREATED_ACCOUNTS}")
                            
                        if resultado == 2:
                            shutil.rmtree(temp_filename)
                            driver, temp_filename = iniciar_navegador(proxy=None)
                            driver.set_window_size(width, height)
                            driver.set_window_position(x, y)
                    
                    except InvalidSessionIdException:
                        if driver in DRIVER_LIST:
                            DRIVER_LIST.remove(driver)
                        time.sleep(5)
                        shutil.rmtree(temp_filename)

                        driver, temp_filename = iniciar_navegador(proxy=None)
                        driver.set_window_size(width, height)
                        driver.set_window_position(x, y)
                        continue 
                    except Exception as err:
                        if driver in DRIVER_LIST:
                            DRIVER_LIST.remove(driver)
                        try:
                            driver.close()
                            driver.quit()
                        except:
                            pass
                        time.sleep(10)
                        shutil.rmtree(temp_filename)

                        driver, temp_filename = iniciar_navegador(proxy=None)
                        driver.set_window_size(width, height)
                        driver.set_window_position(x, y)
                        continue

            except InvalidSessionIdException:
                if driver in DRIVER_LIST:
                    DRIVER_LIST.remove(driver)
                time.sleep(5)
                continue

            except Exception as err:
                driver.close()
                if driver in DRIVER_LIST:
                    DRIVER_LIST.remove(driver)
                try:
                    driver.quit()
                except:
                    shutil.rmtree(temp_filename)
                    pass
                time.sleep(5)
                continue
        except:
            pass

import ctypes

if __name__ == "__main__":
    try:
        threads = []
        #thread = threading.Thread(target=vpn_rotate, daemon=True)
        #thread.start()

        REALTIME_PRIORITY_CLASS = 0x00000100

        t = threading.Thread(target=driver_reset, daemon=True)
        t.start()


        # Define prioridade máxima para o processo atual
        ctypes.windll.kernel32.SetPriorityClass(
            ctypes.windll.kernel32.GetCurrentProcess(),
            REALTIME_PRIORITY_CLASS
        )

        for i in range(NUM_THREADS):
            t = threading.Thread(target=worker, args=(i, NUM_THREADS), daemon=True)
            t.start()
            threads.append(t)

        for t in threads:
            t.join()

        print("Processo concluído. Veja o arquivo contas.csv para seu progresso.")
    except:
        t = threading.Thread(target=worker, args=(i, NUM_THREADS), daemon=True)
        t.start()
        threads.append(t)
